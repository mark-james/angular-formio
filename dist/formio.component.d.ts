import { EventEmitter, OnInit, OnChanges, ElementRef } from '@angular/core';
import { FormioService } from './formio.service';
import { FormioLoader } from './formio.loader';
import { FormioAlerts } from './formio.alerts';
import { FormioAppConfig } from './formio.config';
import { FormioForm, FormioOptions, FormioRefreshValue } from './formio.common';
export declare class FormioComponent implements OnInit, OnChanges {
    private loader;
    private alerts;
    private config;
    ready: Promise<object>;
    readyResolve: any;
    form: FormioForm;
    submission: any;
    src: string;
    url: string;
    service: FormioService;
    options: FormioOptions;
    readOnly: boolean;
    hideComponents: string[];
    refresh: EventEmitter<FormioRefreshValue>;
    error: EventEmitter<any>;
    success: EventEmitter<object>;
    language: EventEmitter<string>;
    render: EventEmitter<object>;
    customEvent: EventEmitter<object>;
    submit: EventEmitter<object>;
    prevPage: EventEmitter<object>;
    nextPage: EventEmitter<object>;
    beforeSubmit: EventEmitter<object>;
    change: EventEmitter<object>;
    invalid: EventEmitter<boolean>;
    errorChange: EventEmitter<any>;
    formLoad: EventEmitter<any>;
    formioElement: ElementRef;
    formio: any;
    initialized: boolean;
    constructor(loader: FormioLoader, alerts: FormioAlerts, config: FormioAppConfig);
    setForm(form: FormioForm): any;
    initialize(): void;
    ngOnInit(): void;
    onRefresh(refresh: FormioRefreshValue): void;
    ngOnChanges(changes: any): void;
    onPrevPage(data: any): void;
    onNextPage(data: any): void;
    onSubmit(submission: any, saved: boolean): void;
    onError(err: any): void;
    submitExecute(submission: object): void;
    submitForm(submission: any): void;
}
