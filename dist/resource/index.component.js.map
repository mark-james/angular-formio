{"version":3,"sources":["../../src/resource/index.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAU,MAAO,eAAA,CAAgB;AAC1C,OAAO,EAAE,MAAA,EAAQ,cAAA,EAAe,MAAO,iBAAA,CAAkB;AACzD,OAAO,EAAE,qBAAA,EAAsB,MAAO,oBAAA,CAAqB;AAC3D,OAAO,EAAE,oBAAA,EAAqB,MAAO,mBAAA,CAAoB;AAEzD,oBAAoB;AACpB,IAAM,KAAA,GAAQ,OAAA,CAAQ,aAAC,CAAa,CAAC;AACrC,mBAAmB;AAGnB;IAGI,sCACW,OAA8B,EAC9B,KAAqB,EACrB,MAAc,EACd,MAA4B;QAJvC,iBAwBC;QAvBU,YAAO,GAAP,OAAO,CAAuB;QAC9B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAsB;QAEnC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACpD,yDAAyD;YACzD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,UAAC,OAAY;gBAC1C,KAAK,CAAC,OAAO,EAAE,UAAC,MAAW;oBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,KAAI,CAAC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;oBACzE,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,mCAAmC;gBACnC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YACxC,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QACxC,CAAC;IACL,CAAC;IAED,+CAAQ,GAAR,UAAS,GAAO;QACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACtE,CAAC;IACE,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EACN,6JAA6J;wBAC7J,4JAA4J;iBACjK,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,qBAAqB,GAAG;QAC/B,EAAC,IAAI,EAAE,cAAc,GAAG;QACxB,EAAC,IAAI,EAAE,MAAM,GAAG;QAChB,EAAC,IAAI,EAAE,oBAAoB,GAAG;KAC7B,EAL6F,CAK7F,CAAC;IACF,mCAAC;CA9CD,AA8CC,IAAA;SA9CY,4BAA4B","file":"index.component.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormioResourceService } from './resource.service';\nimport { FormioResourceConfig } from './resource.config';\n\n/* tslint:disable */\nconst _each = require('lodash/each');\n/* tslint:enable */\n\n\nexport class FormioResourceIndexComponent {\n    public gridSrc: string;\n    public gridQuery: any;\n    constructor(\n        public service: FormioResourceService,\n        public route: ActivatedRoute,\n        public router: Router,\n        public config: FormioResourceConfig\n    ) {\n        this.service.initialize();\n        this.gridQuery = {};\n        if (this.config.parents && this.config.parents.length) {\n            // Wait for the parents to load before loading this grid.\n            this.service.onParents.subscribe((parents: any) => {\n                _each(parents, (parent: any) => {\n                    if (parent) {\n                        this.gridQuery['data.' + parent.name + '._id'] = parent.resource._id;\n                    }\n                });\n\n                // Set the source to load the grid.\n                this.gridSrc = this.service.formUrl;\n            });\n        }\n        else if (this.service.formUrl) {\n            this.gridSrc = this.service.formUrl;\n        }\n    }\n\n    onSelect(row:any) {\n        this.router.navigate([row._id, 'view'], {relativeTo: this.route});\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    template:\n      '<formio-grid [src]=\"gridSrc\" [query]=\"gridQuery\" [onForm]=\"service.formLoaded\" (select)=\"onSelect($event)\" (error)=\"service.onError($event)\"></formio-grid>' +\n      '<button class=\"btn btn-primary\" *ngIf=\"service.form\" routerLink=\"new\"><span class=\"glyphicon glyphicon-plus\"></span> New {{ service.form.title }}</button>'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormioResourceService, },\n{type: ActivatedRoute, },\n{type: Router, },\n{type: FormioResourceConfig, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}